SELECT *,NTILE(6) OVER (ORDER BY Season) Parts FROM MATCH WHERE (Ntile(6) OVER (ORDER BY Season)) >2
--Row_Number() OVER (ORDER BY Column1)
--Windowed functions can only appear in the SELECT or ORDER BY clauses

--Row_Number() IN SELECT 
USE R1
GO
SELECT *,ROW_NUMBER() OVER (PARTITION BY Department ORDER BY SALARY DESC,ID ASC) [Row_number] FROM Employee

SELECT * FROM Employee

--USE CASE DELETING Duplicate Rows Using Row_Number()

CREATE TABLE SHOP(ProductID INT NOT NULL,ProductName VARCHAR(100) DEFAULT 'Pencil',[Date] DATE DEFAULT GETDATE())

SELECT * FROM SHOP 

INSERT INTO SHOP(ProductID,ProductName) VALUES(420,'Pen')
GO
INSERT INTO SHOP(ProductID) VALUES(777)
GO
INSERT INTO SHOP(ProductID,ProductName,Date) VALUES(888,'Eraser','12-12-2021')
GO
INSERT INTO SHOP(ProductID,Date) VALUES(777,'12-12-2021')
GO
INSERT INTO SHOP(ProductID,ProductName,Date) VALUES(420,'Pen','12-12-2021')
GO
INSERT INTO SHOP(ProductID,ProductName) VALUES(888,'Eraser')
GO


SELECT * FROM SHOP



SELECT *,Row_Number() OVER (PARTITION By ProductID,[Date] ORDER BY Date) [Count of product] FROM SHOP


--DELETING Duplicate Rows From SHOP table

BEGIN TRANSACTION


WITH CTE AS (SELECT *,Row_Number() OVER (PARTITION By ProductID,[Date] ORDER BY Date) [Count of product] 
FROM SHOP)
DELETE FROM CTE WHERE [Count of product]>1


SELECT * FROM Shop
ROLLBACK TRANSACTION


--ROW_NUMBER() IN ORDER BY CLAUSE

SELECT [Date],ProductID,ProductName,
		ROW_NUMBER() OVER (PARTITION BY date,ProductID ORDER BY ProductID) [DateWiseProductSales]  --DATE WISE SALES
FROM SHOP 
		ORDER BY ROW_NUMBER() OVER (ORDER BY ProductID) --PRODUCT WISE SALES



--RANK()
DROP TABLE IF EXISTS Exams
CREATE TABLE Exams(StudentID INT PRIMARY KEY IDENTITY(1001,1000),
						TEL INT NOT NULL,
						HIN INT NOT NULL,
						ENG INT NOT NULL,
						MAT INT NOT NULL,
						SCI INT NOT NULL,
						SOC INT NOT NULL,
						Total INT NOT NULL,
						Percentage FLOAT NOT NULL)
DECLARE @T INT   =41
		,@H INT  =34
		,@E INT  =36 
		,@M INT  =62 
		,@SC INT =36
		,@SO INT =67
DECLARE @Tot INT = (@T+@H+@E+@M+@SC+@SO)
DECLARE @Percent FLOAT  = CAST(@Tot AS FLOAT)/6

SELECT * FROM EXAMS

SELECT *

		--,NTILE(6) OVER (PARTITION BY ORDER BY TOTAl DESC) [NTILE1] 
FROM Exa



SELECT *,COUNT(Total) OVER(ORDER BY Total) FROM EXAMS 


SELECT *,LEAD(MARKS) OVER (PARTITION BY StudentName ORDER BY MARKS) FROM EXamRESult

SELECT * FROM Employee

SELECT ID,SALARY,
	SALARY-(CASE WHEN LAG(SALARY) OVER (PARTITION BY ID ORDER BY [YEAR]) IS NULL THEN 0 ELSE LAG(SALARY) OVER (PARTITION BY ID ORDER BY [YEAR]) OVER [DIFFERENCE] 
FROM DATA



SELECT ID,SALARY,diff, CASE WHEN (CAST(diff AS FLOAT))/SAlary*100
FROM (
		SELECT ID,SALARY,
		ISNULL((SALARY-LAG(SALARY) OVER(PARTITION BY ID ORDER BY YEAR)) diff,
FROM DATA)


--Department wise Creating Groups according to their salary descending order 
SELECT *,RANK() OVER (Partition BY Department ORDER BY SALARY DESC) [NTILE_Dept_Wise_GROUP] FROM Employee
ORDER BY ROW_NUMBER() OVER (PARTITION BY Department ORDER BY SALARY DESC)

INSERT INTO Employee(Department,Salary) Values('CSE',NULL)



INSERT INTO EXAMRESULT(StudentName,Subject,Marks) SELECT STUDENTNAME,Subject,NULL FROM EXAMRESULT

SELECT *
		,ROW_NUMBER() OVER (PARTITION BY Subject ORDER BY Marks) [ROW_NUMBER]
		,RANK() OVER (PARTITION BY Subject ORDER BY Marks) [RANK]
		,DENSE_RANK() OVER (PARTITION BY Subject ORDER BY Marks) [DENSE_RANK]
		,NTILE(4) OVER (PARTITION BY Subject ORDER BY Marks) [NTILE]
FROM EXAMRESULT


SELECT *,MAX(MARKS) OVER(PARTITION BY Subject) [Subject wise High] FROM ExamResult
SELECT *,NTILE(3) OVER (ORDER BY MARKS DESC) [GROUPS] FROM ExamResult


SELECT *,DENSE_RANK() OVER (ORDER BY Marks) FROM ExamResult

SELECT * 
FROM ( SELECT *,ROW_NUMBER() OVER(ORDER BY Marks) [ROW_NUMBER],COUNT(MARKS) OVER (PARTITION BY Marks) [Count]  
FROM ExamResult ) X


